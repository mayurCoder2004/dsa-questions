                                                      // BRUTE FORCE APPROACH (Not passing some test cases)

class Solution {
    public int longestConsecutive(int[] arr) {
        int n = arr.length;
        Arrays.sort(arr);

        if (n <= 1) {
            return n;
        }

        int count = 1;

        for (int i=0; i<n-1; i++) {
            if (arr[i+1] == arr[i] + 1) {
                count++;
            }
            else {
                count = 1;
            }
        }
        return count;
    }
}





                                                          // BETTER APPROACH
                                                          
class Solution {
    public int longestConsecutive(int[] nums) {
        int n = nums.length;

        if (n == 0){
            return 0;
        }

        Arrays.sort(nums);

        int max = 1, countCurr = 1, lastSmallest = Integer.MIN_VALUE;
        for (int i=0; i<n; i++){
            if (nums[i] - 1 == lastSmallest){
                lastSmallest = nums[i];
                countCurr = countCurr + 1;
            }
            else if (nums[i] == lastSmallest){

            }
            else if (nums[i] != lastSmallest){
                lastSmallest = nums[i];
                countCurr = 1;
            }
            max = Math.max(max, countCurr);
        }
        return max;
    }
}





                                                         // OPTIMAL APPROACH
                                                         
class Solution {
    public int longestConsecutive(int[] nums) {
        int n = nums.length;

        if (n == 0){
            return 0;
        }
        int max = 1, count = 1;

        HashSet<Integer> ans = new HashSet<>();

        for (int i=0; i<n; i++){
            ans.add(nums[i]);
        }
        
        for (int element: ans){
            if (!ans.contains(element - 1)){
                int x = element;
                count = 1;
                while (ans.contains(x + 1)){
                    x = x + 1;
                    count = count + 1;
                }
                max = Math.max(max, count);
            }
        }
        return max;
    }
}
