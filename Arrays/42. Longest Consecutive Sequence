                                                      // BRUTE FORCE APPROACH

class Solution {
    public static boolean search(int [] arr, int x){
        for (int i=0; i<arr.length; i++){
            if (arr[i] == x){
                return true;
            }
        }
        return false;
    }
    public int longestConsecutive(int[] nums) {
        int n = nums.length;

        if (n == 0){
            return 0;
        }
        
        int max = 1;
        for (int i=0; i<n; i++){
            int count = 1;
            int x = nums[i];
            while (search(nums, x + 1)){
                x = x + 1;
                count = count + 1;
            }
            max = Math.max(max, count);
        }
        return max;
    }
}





                                                          // BETTER APPROACH
                                                          
class Solution {
    public int longestConsecutive(int[] nums) {
        int n = nums.length;

        if (n == 0){
            return 0;
        }

        Arrays.sort(nums);

        int max = 1, countCurr = 1, lastSmallest = Integer.MIN_VALUE;
        for (int i=0; i<n; i++){
            if (nums[i] - 1 == lastSmallest){
                lastSmallest = nums[i];
                countCurr = countCurr + 1;
            }
            else if (nums[i] == lastSmallest){

            }
            else if (nums[i] != lastSmallest){
                lastSmallest = nums[i];
                countCurr = 1;
            }
            max = Math.max(max, countCurr);
        }
        return max;
    }
}





                                                         // OPTIMAL APPROACH
                                                         
class Solution {
    public int longestConsecutive(int[] nums) {
        int n = nums.length;

        if (n == 0){
            return 0;
        }
        int max = 1, count = 1;

        HashSet<Integer> ans = new HashSet<>();

        for (int i=0; i<n; i++){
            ans.add(nums[i]);
        }
        
        for (int element: ans){
            if (!ans.contains(element - 1)){
                int x = element;
                count = 1;
                while (ans.contains(x + 1)){
                    x = x + 1;
                    count = count + 1;
                }
                max = Math.max(max, count);
            }
        }
        return max;
    }
}
