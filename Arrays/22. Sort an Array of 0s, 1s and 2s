                                  // BRUTE FORCE APPROACH
                                  
// Step 1 :- Count the number of 0s, 1s and 2s
// Step 2 :- Then use three while loops 
// Step 3 :- First while loop while make sure that all the zeroes are inserted
// Step 3 :- Second while loop while make sure that all the ones are inserted
// Step 3 :- Third while loop while make sure that all the twos are inserted

public class Solution{
    public static void sort012(int [] arr){
        int n = arr.length;
        int zero = 0, one = 0, two = 0;

        for (int i=0; i<n; i++){
            if (arr[i] == 0){
                zero++;
            }
            else if (arr[i] == 1){
                one++;
            }
            else if (arr[i] == 2){
                two++;
            }
        }

        int j = 0;
        while (zero != 0){
            arr[j++] = 0;
            zero--;
        }
        while (one != 0){
            arr[j++] = 1;
            one--;
        }
        while (two != 0){
            arr[j++] = 2;
            two--;
        }
    }
}


                                                            // OPTIMAL APPROACH (using two pointer approach)

class Solution {
    public void swap(int [] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    public void sortColors(int[] arr) {
        int n = arr.length;
        int low = 0, mid = 0, high = n-1;

        while (mid <= high) {
            if (arr[mid] == 0) {
                swap(arr, low, mid);
                low++;
                mid++;
            }
            else if (arr[mid] == 1) {
                mid++;
            }
            else if (arr[mid] == 2) {
                swap(arr, mid, high);
                high--;
            }
        }
    }
}
