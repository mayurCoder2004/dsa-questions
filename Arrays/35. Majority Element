                                                     // BRUTE FORCE APPROACH

class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;
        for (int i=0; i<n; i++){
            int count = 0;
            for (int j=0; j<n; j++){
                if (nums[i] == nums[j]){
                    count++;
                }
            }
            if (count > n/2){
                return nums[i];
            }
        }
        return -1;
    }
}





                                                     // BETTER APPROACH

class Solution {
    public int majorityElement(int[] arr) {
        int n = arr.length;

        HashMap<Integer, Integer> countMap = new HashMap<>();

        for (int num : arr) {
            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
        }

        for (int key: countMap.keySet()) {
            if (countMap.get(key) > n/2) {
                return key;
            }
        }

        return -1;
    }
}





                                                   // OPTIMAL APPROACH

class Solution {
    public int majorityElement(int[] arr) {
        int n = arr.length;
        int count = 0;
        int element = arr[0];

        for (int i=0; i<n; i++) {
            if (count == 0) {
                element = arr[i];
                count = 1;
            }
            else if (element == arr[i]) {
                count++;
            }
            else {
                count--;
            }
        }

        return element;
    }
}                                            
