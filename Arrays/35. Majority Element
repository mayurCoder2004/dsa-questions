                                                     // BRUTE FORCE APPROACH

class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;
        for (int i=0; i<n; i++){
            int count = 0;
            for (int j=0; j<n; j++){
                if (nums[i] == nums[j]){
                    count++;
                }
            }
            if (count > n/2){
                return nums[i];
            }
        }
        return -1;
    }
}





                                                     // BETTER APPROACH

class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;
        HashMap<Integer, Integer> ans = new HashMap<>();

        for (int i=0; i<n; i++){
            int value = ans.getOrDefault(nums[i], 0);
            ans.put(nums[i], value+1);
        }

        for (Map.Entry<Integer, Integer> it: ans.entrySet()){
            if (it.getValue() > n/2){
                return it.getKey();
            }
        }
        return -1;
    }
}





                                                   // OPTIMAL APPROACH

class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;
        int count = 0;
        int element = 0;

        for (int i=0; i<n; i++){
            if (count == 0){
                element = nums[i];
                count = 1;
            }
            else if (nums[i] != element){
                count--;
            }
            else {
                count++;
            }
        }
        return element;
    }
}                                                   
