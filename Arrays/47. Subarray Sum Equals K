                                                              // BRUTE FORCE APPROACH

class Solution {
    public int subarraySum(int[] arr, int k) {
        int n = arr.length;
        int count = 0;

        for (int i=0; i<n; i++) {
            for (int j=i; j<n; j++) {
                int sum = 0;
                for (int s=i; s<=j; s++) {
                    sum += arr[s];
                }
                if (sum == k) {
                    count++;
                }
            }
        }

        return count;
    }
}


                                                             // BETTER APPROACH
                                                             
class Solution {
    public int subarraySum(int[] arr, int k) {
        int n = arr.length;
        int count = 0;

        for (int i=0; i<n; i++) {
            int sum = 0;
            for (int j=i; j<n; j++) {
                sum += arr[j];
                if (sum == k) {
                    count++;
                }
            }
        }

        return count;
    }
}


                                                            // OPTIMAL APPROACH

class Solution {
    public int subarraySum(int[] arr, int k) {
        int n = arr.length;
        int count = 0;
        int sum = 0;

        HashMap<Integer, Integer> ans = new HashMap<>();
        ans.put(0, 1);

        for (int i=0; i<n; i++) {
            sum += arr[i];

            if (ans.containsKey(sum - k)) {
                count += ans.get(sum - k);
            }

            ans.put(sum, ans.getOrDefault(sum, 0) + 1);
        }

        return count;
    }
}
