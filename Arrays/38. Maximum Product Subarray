                                                                        // BRUTE FORCE APPROACH

class Solution {
    public int maxProduct(int[] arr) {
        int n = arr.length;
        int maxProduct = Integer.MIN_VALUE;

        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int prod = 1;
                for (int k = i; k <= j; k++) {
                    prod *= arr[k];
                }
                maxProduct = Math.max(maxProduct, prod);
            }
        }
        return maxProduct;
    }
}

                                                                        // BETTER APPROACH

class Solution {
    public int maxProduct(int[] arr) {
        int n = arr.length;
        int maxProduct = Integer.MIN_VALUE;

        if (n == 1) {
            return arr[0];
        }

        for (int i=0; i<n; i++) {
            int prod = 1;
            for (int j=i; j<n; j++) {
                prod *= arr[j];
                maxProduct = Math.max(prod, maxProduct);
            }
        }
        return maxProduct;
    }
}


                                                                        // OPTIMAL APPROACH

class Solution {
    public int maxProduct(int[] arr) {
        int n = arr.length;
        int maxProduct = Integer.MIN_VALUE;
        int pref = 1, suff = 1;

        for (int i=0; i<n; i++) {
            if (pref == 0) {
                pref = 1;
            }
            if (suff == 0) {
                suff = 1;
            }

            pref = pref * arr[i];
            suff = suff * arr[n-i-1];

            maxProduct = Math.max(maxProduct, Math.max(pref, suff));
        }
        return maxProduct;
    }
}
