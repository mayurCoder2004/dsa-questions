                                                          // BRUTE FORCE APPROACH

class Solution {
    public List<Integer> majorityElement(int[] arr) {
        int n = arr.length;
        ArrayList<Integer> ans = new ArrayList<>();

        for (int i=0; i<n; i++) {
            int count = 0;
            for (int j=0; j<n; j++) {
                if (arr[i] == arr[j]) {
                    count++;
                }
            }
            if (count > n/3) {
                ans.add(arr[i]);
            }
        }

        return ans;
    }
}


                                                        // BETTER APPROACH

class Solution {
    public List<Integer> majorityElement(int[] arr) {
        int n = arr.length;

        ArrayList<Integer> ans = new ArrayList<>();

        HashMap<Integer, Integer> countMap = new HashMap<>();

        for (int num : arr) {
            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
        }

        for (int key: countMap.keySet()) {
            if (countMap.get(key) > n/3) {
                ans.add(key);
            }
        }

        return ans;
    }
}


                                                      // OPTIMAL APPROACH

class Solution {
    public boolean allZeros(int[] arr) {
        for (int num : arr) {
            if (num != 0) {
                return false;
            }
        }
        return true;
    }

    public List<Integer> majorityElement(int[] arr) {
        int n = arr.length;
        ArrayList<Integer> ans = new ArrayList<>();

        if (allZeros(arr)) {
            ans.add(0);
            return ans;
        }

        int cnt1 = 0, cnt2 = 0, el1 = 0, el2 = 0;

        for (int i=0; i<n; i++) {
            if (cnt1 == 0 && el2 != arr[i]) {
                cnt1 = 1;
                el1 = arr[i];
            }
            else if (cnt2 == 0 && el1 != arr[i]) {
                cnt2 = 1;
                el2 = arr[i];
            }
            else if (arr[i] == el1) {
                cnt1++;
            }
            else if (arr[i] == el2) {
                cnt2++;
            }
            else {
                cnt1--;
                cnt2--;
            }
        }

        cnt1 = 0;
        cnt2 = 0;

        for (int i=0; i<arr.length; i++) {
            if (el1 == arr[i]) {
                cnt1++;
            }
            if (el2 == arr[i]) {
                cnt2++;
            }
        }

        int min = (int) n/3 + 1;
        if (cnt1 >= min) {
            ans.add(el1);
        }
        if (cnt2 >= min) {
            ans.add(el2);
        }
        
        return ans;
    }
}                                                      
