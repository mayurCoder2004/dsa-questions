                                                                // BRUTE FORCE APPROACH
class Solution {
    public int longestSubarray(int[] arr, int k) {
        // code here
        int n = arr.length;
        int maxLen = 0;
        
        for (int i=0; i<n; i++) {
            for (int j=i; j<n; j++) {
                int sum = 0;
                for (int s=i; s<=j; s++) {
                    sum += arr[s];
                }
                if (sum == k) {
                    maxLen = Math.max(maxLen, j-i+1);
                }
            }
        }
        return maxLen;
    }
}


                                                                // BETTER APPROACH

class Solution {
    public int longestSubarray(int[] arr, int k) {
        // code here
        int n = arr.length;
        int maxLen = 0;
        
        for (int i=0; i<n; i++) {
            int sum = 0;
            for (int j=i; j<n; j++) {
                sum += arr[j];
                if (sum == k) {
                    maxLen = Math.max(maxLen, j-i+1);
                }
            }
        }
        return maxLen;
    }
}



                                                                // OPTIMAL APPROACH

class Solution {
    public int lenOfLongestSubarr(int[] arr, int k) {
        int n = arr.length;
        HashMap<Integer, Integer> prefSum = new HashMap<>();
        int maxLen = 0;
        int sum = 0;

        for (int i = 0; i < n; i++) {
            sum += arr[i];
            if (sum == k) {
                maxLen = Math.max(maxLen, i + 1);
            }

            int rem = sum - k;
            if (prefSum.containsKey(rem)) {
                int len = i - prefSum.get(rem);
                maxLen = Math.max(maxLen, len);
            }

            if (!prefSum.containsKey(sum)) {
                prefSum.put(sum, i);
            }
        }

        return maxLen;
    }
}
