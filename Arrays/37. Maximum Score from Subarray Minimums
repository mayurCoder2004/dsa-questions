                                                      // BRUTE FORCE APPROACH

class Solution {
    public int pairWithMaxSum(int arr[]) {
        int max = Integer.MIN_VALUE;
        int n = arr.length;
        
        for (int i=0; i<n; i++){
            for (int j=0; j<n; j++){
                int sum = 0;
                for (int k=i; k<=j; k++){
                    if (k == i){
                        sum += arr[k];
                    }
                    
                    if (k == i+1){
                        sum += arr[k];
                    }
                }
                max = Math.max(sum, max);
            }
        }
        return max;
    }
}  





                                                       // BETTER APPROACH

class Solution {
    public int pairWithMaxSum(int arr[]) {
        int max = Integer.MIN_VALUE;
        int n = arr.length;
        
        for (int i=0; i<n; i++){
            int sum = 0;
            for (int j=0; j<n; j++){
                if (j == i){
                    sum += arr[j];
                }
                    
                if (j == i+1){
                    sum += arr[j];
                }
                max = Math.max(sum, max);
            }
        }
        return max;
    }
}





                                                       // OPTIMIZED APPROACH

class Solution {
    public int pairWithMaxSum(int arr[]) {
        int max = Integer.MIN_VALUE;
        int n = arr.length;
        int sum = 0;
        for (int i=1; i<n; i++){
            sum = arr[i] + arr[i-1];
            max = Math.max(sum, max);
        }
        return max;
    }
}                                                       
