                                                                // BRUTE FORCE APPROACH

public class Solution {
    public int solve(int[] arr, int B) {
        int n = arr.length;
        int count = 0;
        
        for (int i=0; i<n; i++) {
            for (int j=i; j<n; j++) {
                int xor = 0;
                for (int k=i; k<=j; k++) {
                    xor = xor ^ arr[k];
                }
                if (xor == B) {
                    count++;
                }
            }
        }
        return count;
    }
}


                                                               // BETTER APPROACH

public class Solution {
    public int solve(int[] arr, int B) {
        int n = arr.length;
        int count = 0;
        
        for (int i=0; i<n; i++) {
            int xor = 0;
            for (int j=i; j<n; j++) {
                xor = xor ^ arr[j];
                if (xor == B) {
                    count++;
                }
            }
        }
        return count;
    }
}


                                                              // OPTIMAL APPROACH

public class Solution {
    public int solve(int[] arr, int b) {
        int n = arr.length;
        int count = 0;
        int xor = 0;
        HashMap<Integer, Integer> freq = new HashMap<>();
        
        for (int i=0; i<n; i++) {
            xor = xor ^ arr[i];
            if (freq.get(xor ^ b) != null) {
                count += freq.get(xor ^ b);
            }
            if (xor == b) {
                count++;
            }
            if (freq.get(xor) != null) {
                freq.put(xor, freq.get(xor) + 1);
            }
            else {
                freq.put(xor, 1);
            }
        }
        return count;
    }
}                                                              
