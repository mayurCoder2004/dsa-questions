                                                      // BRUTE FORCE APPROACH

class Solution {
    public int maxSubArray(int[] nums) {
        int n = nums.length;
        int max = Integer.MIN_VALUE;
        
        for (int i=0; i<n; i++){
            for (int j=i; j<n; j++){
                int sum = 0;
                for (int k=i; k<=j; k++){
                    sum += nums[k];
                }
                max = Math.max(sum, max);
            }
        }
        return max;
    }
}


                                                    // BETTER APPROACH

class Solution {
    public int maxSubArray(int[] nums) {
        int n = nums.length;
        int max = Integer.MIN_VALUE;
        
        for (int i=0; i<n; i++){
            int sum = 0;
            for (int j=i; j<n; j++){
                sum += nums[j];
                max = Math.max(sum, max);
            }
        }
        return max;
    }
}





                                                    // OPTIMAL APPROACH

class Solution {
    public int maxSubArray(int[] nums) {
        int n = nums.length;
        int max = Integer.MIN_VALUE;
        int sum = 0;
        
        for (int i=0; i<n; i++){
            sum += nums[i];

            if (sum > max){
                max = sum;
            }

            if (sum < 0){
                sum = 0;
            }
        }
        return max;
    }
}                                                    


                                                    // IF SUBARRAY IS ALSO ASKED

class Solution {
    public int maxSubArray(int[] arr) {
        int n = arr.length;
        int sum = 0;
        int max = Integer.MIN_VALUE;
        int ansStart = -1, ansEnd = -1;
        int start = 0;

        for (int i=0; i<n; i++) {
            sum += arr[i];
            if (sum == 0) {
                start = i;
            }
            if (sum > max) {
                max = sum;
                ansStart = start;
                ansEnd = i;
            }

            if (sum < 0) {
                sum = 0;
            }
        }
        return max;
    }
}
