class Solution {
    public int lower_bound(int [] arr, int n, int x){
        int st = 0, end = n-1;
        int ans = n;

        while (st <= end){
            int mid = st + (end - st)/2;
            if (arr[mid] >= x){
                ans = mid;
                end = mid - 1;
            }
            else {
                st = mid + 1;
            }
        }
        return ans;
    }

    public int upper_bound(int [] arr, int n, int x){
        int st = 0, end = n-1;
        int ans = n;

        while (st <= end){
            int mid = st + (end - st)/2;
            if (arr[mid] > x){
                ans = mid;
                end = mid - 1;
            }
            else {
                st = mid + 1;
            }
        }
        return ans;
    }
    public int[] searchRange(int[] nums, int target) {
        int n = nums.length;
        int lb = lower_bound(nums, n, target);
        int ub = upper_bound(nums, n, target);

        if ((lb == n) || (nums[lb] != target)){
            return new int[]{-1, -1};
        }
        return new int[]{lb, ub-1};
    }
}

