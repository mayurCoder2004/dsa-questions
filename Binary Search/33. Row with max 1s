                                                                // BRUTE FORCE APPROACH

class Solution {
    public int rowWithMax1s(int arr[][]) {
        // code here
        int m = arr.length;
        int n = arr[0].length;
        int ans = -1;
        int max = 0;
        
        for (int i=0; i<m; i++) {
            int count = 0;
            for (int j=0; j<n; j++) {
                if (arr[i][j] == 1) {
                    count++;
                }
            }
            if (count > max) {
                max = count;
                ans = i;
            }
        }
        return ans;
    }
}


                                                                // BINARY SEARCH APPROACH

class Solution {
    int lowerBound(int [] arr, int n, int x){
        int st = 0, end = n-1;
        int ans = n;
        
        while (st <= end){
            int mid = st + (end - st)/2;
            if (arr[mid] >= x){
                ans = mid;
                end = mid - 1;
            }
            else {
                st = mid + 1;
            }
        }
        return ans;
    }
    public int rowWithMax1s(int arr[][]) {
        // code here
        int m = arr.length;
        int n = arr[0].length;
        int count_max = 0;
        int index = -1;
        
        for (int i=0; i<m; i++){
            int count = n - lowerBound(arr[i], n, 1);
            if (count > count_max){
                count_max = count;
                index = i;
            }
        }
        return index;
    }
}
