                                                      // BRUTE FORCE APPROACH

class Solution {
    public static boolean isPossible(int [] arr, int day, int m, int k){
        int count = 0;
        int noOfBouquet = 0;
        int n = arr.length;
        for (int i=0; i<n; i++){
            if (arr[i] <= day){
                count++;
            }
            else {
                noOfBouquet += (count / k);
                count = 0;
            }
        }
        noOfBouquet += (count / k);
        if (noOfBouquet >= m){
            return true;
        }
        return false;
    }

    public static int minimum(int [] arr){
        int n = arr.length;
        int min = Integer.MAX_VALUE;

        for (int i=0; i<n; i++){
            min = Math.min(min, arr[i]);
        }
        return min;
    }

    public static int maximum(int [] arr){
        int n = arr.length;
        int max = Integer.MIN_VALUE;

        for (int i=0; i<n; i++){
            max = Math.max(max, arr[i]);
        }
        return max;
    }
    public int minDays(int[] bloomDay, int m, int k) {
        int min = minimum(bloomDay);
        int max = maximum(bloomDay);
        
        for (int i=min; i<=max; i++){
            if (isPossible(bloomDay, i, m, k)){
                return i;
            }
        }
        return -1;
    }
}





                                                    // BINARY SEARCH APPROACH

class Solution {
    public static boolean isPossible(int [] arr, int day, int m, int k){
        int count = 0;
        int noOfBouquet = 0;
        int n = arr.length;
        for (int i=0; i<n; i++){
            if (arr[i] <= day){
                count++;
            }
            else {
                noOfBouquet += (count / k);
                count = 0;
            }
        }
        noOfBouquet += (count / k);
        if (noOfBouquet >= m){
            return true;
        }
        return false;
    }

    public static int minimum(int [] arr){
        int n = arr.length;
        int min = Integer.MAX_VALUE;

        for (int i=0; i<n; i++){
            min = Math.min(min, arr[i]);
        }
        return min;
    }

    public static int maximum(int [] arr){
        int n = arr.length;
        int max = Integer.MIN_VALUE;

        for (int i=0; i<n; i++){
            max = Math.max(max, arr[i]);
        }
        return max;
    }
    public int minDays(int[] bloomDay, int m, int k) {
        int min = minimum(bloomDay);
        int max = maximum(bloomDay);
        
        int low = min, high = max;
        int ans = -1;

        while (low <= high){
            int mid = low + (high - low)/2;
            if (isPossible(bloomDay, mid, m, k)){
                ans = mid;
                high = mid - 1;
            }
            else {
                low = mid + 1;
            }
        }
        return ans;
    }
}
