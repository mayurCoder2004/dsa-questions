                                                              // BRUTE FORCE APPROACH

class Solution {
    public static int sum(int [] arr){
        int sum = 0;
        for (int i=0; i<arr.length; i++){
            sum += arr[i];
        }
        return sum;
    }

    public static int max(int [] arr){
        int max = Integer.MIN_VALUE;
        for (int i=0; i<arr.length; i++){
            max = Math.max(arr[i], max);
        }
        return max;
    }

    public static int noOfSubArray(int [] arr, int k){
        int s = 1, subArraySum = 0;
        int n = arr.length;
        for (int i=0; i<n; i++){
            if (subArraySum + arr[i] <= k){
                subArraySum += arr[i];
            }
            else {
                s++;
                subArraySum = arr[i];
            }
        }
        return s;
    }
    public int splitArray(int[] nums, int k) {
        int st = max(nums), end = sum(nums);

        for (int i=st; i<=end; i++){
            int countSubArray = noOfSubArray(nums, i);
            if (countSubArray == k){
                return i;
            }
        }
        return -1;
    }
}





                                                              // BINARY SEARCH APPROACH

class Solution {
    public static int sum(int [] arr){
        int sum = 0;
        for (int i=0; i<arr.length; i++){
            sum += arr[i];
        }
        return sum;
    }

    public static int max(int [] arr){
        int max = Integer.MIN_VALUE;
        for (int i=0; i<arr.length; i++){
            max = Math.max(arr[i], max);
        }
        return max;
    }

    public static int noOfSubArray(int [] arr, int k){
        int s = 1, subArraySum = 0;
        int n = arr.length;
        for (int i=0; i<n; i++){
            if (subArraySum + arr[i] <= k){
                subArraySum += arr[i];
            }
            else {
                s++;
                subArraySum = arr[i];
            }
        }
        return s;
    }
    public int splitArray(int[] nums, int k) {
        int st = max(nums), end = sum(nums);

        while (st <= end){
            int mid = st + (end - st)/2;
            int countSubArray = noOfSubArray(nums, mid);
            if (countSubArray > k){
                st = mid + 1;
            }
            else {
                end = mid - 1;
            }
        }
        return st;
    }
}
