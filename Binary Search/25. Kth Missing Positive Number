                                                        // BRUTE FORCE APPROACH

class Solution {
    public int findKthPositive(int[] arr, int k) {
        int n = arr.length;

        for (int i=0; i<n; i++){
            if (arr[i] <= k){
                k++;
            }
            else {
                break;
            }
        }
        return k;
    }
}



                                                        // APPROACH USING HASHMAP

class Solution {
    public int findKthPositive(int[] arr, int k) {
        int n = arr.length;
        Map<Integer, Integer> map = new HashMap<>();

        for (int num: arr) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }

        for (int i=1; i<=1000; i++) {
            if (k == 0) {
                return i - 1;
            }
            if (!map.containsKey(i)) {
                k--;
            } 
        }
        return -1;
    }
}





                                                       // BINARY SEARCH APPROACH

class Solution {
    public int findKthPositive(int[] arr, int k) {
        int n = arr.length;
        int st = 0, end = n-1;

        while (st <= end){
            int mid = st + (end - st)/2;
            int missing = arr[mid] - (mid + 1);
            if (missing < k){
                st = mid + 1;
            }
            else {
                end = mid - 1;
            }
        }
        return end + 1 + k;
    }
}
