                                                            // BRUTE FORCE APPROACH

class Solution {
    public int beautySum(String s) {
        int n = s.length();
        int count = 0;

        for (int i=0; i<n; i++) {
            for (int j=i; j<n; j++) {
                String str = s.substring(i, j+1);
                HashMap<Character, Integer> map = new HashMap<>();
                for (int k=0; k<str.length(); k++) {
                    char ch = str.charAt(k);
                    map.put(ch, map.getOrDefault(ch, 0) + 1);
                }

                int maxFreq = Integer.MIN_VALUE;
                int minFreq = Integer.MAX_VALUE;

                // Iterate through the values
                for (int freq : map.values()) {
                    if (freq > maxFreq) maxFreq = freq;
                    if (freq < minFreq) minFreq = freq;
                }

                int diff = maxFreq - minFreq;

                count += diff;
            }
        }
        return count;
    }
}                                                            


                                                                    // OPTIMAL APPROACH

class Solution {
    public int beautySum(String s) {
        int n = s.length();
        int count = 0;

        for (int i=0; i<n; i++) {
            int [] freq = new int[26];
            for (int j=i; j<n; j++) {
                char ch = s.charAt(j);
                // Adding the freq of element
                freq[ch - 'a']++;

                int max = 0;
                int min = Integer.MAX_VALUE;

                // Calculating the max and min freq in the sub array
                for (int f: freq) {
                    if (f > 0) {
                        max = Math.max(max, f);
                        min = Math.min(min, f);
                    }
                }

                int diff = max - min;
                count += diff;
            }
        }
        return count;
    }
}
