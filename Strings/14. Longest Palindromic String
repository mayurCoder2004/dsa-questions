                                                        // BRUTE FORCE APPROACH

class Solution {
    public boolean isPalindrome(String s, int i, int j) {
        int n = s.length();
        while (i <= j) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
    public String longestPalindrome(String s) {
        int n = s.length();
        int st = 0, end = 0;
        int max = 1;

        for (int i=0; i<n; i++) {
            for (int j=i; j<n; j++) {
                if (isPalindrome(s, i, j)) {
                    int size = j - i + 1;
                    if (size > max) {
                        st = i;
                        end = j;
                        max = size;
                    }
                }
            }
        }

        return s.substring(st, end+1);
    }
}                                                        


                                                                // OPTIMAL APPROACH

class Solution {
    public int expandFromCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return right - left - 1;
    }
    public String longestPalindrome(String s) {
        int n = s.length();

        if (s == null || n < 2) {
            return s;
        }

        String ans = "";
        int maxLen = 1, start = 0;

        for (int i=0; i<n; i++) {
            int len1 = expandFromCenter(s, i, i);
            int len2 = expandFromCenter(s, i, i+1);

            int len = Math.max(len1, len2);

            if (len > maxLen) {
                maxLen = len;
                start = i - (len - 1) / 2;
            }
        }

        return s.substring(start, start + maxLen);
    }
}
