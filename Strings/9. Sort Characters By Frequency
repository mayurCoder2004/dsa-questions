                                                              // BRUTE FORCE APPROACH

class Solution {
    public String frequencySort(String s) {
        HashMap<Character, Integer> map = new HashMap<>();

        int n = s.length();

        for (int i=0; i<n; i++) {
            char ch = s.charAt(i);
            if (map.containsKey(ch)) {
                map.put(ch, map.get(ch) + 1);
            }
            else {
                map.put(ch, 1);
            }
        }

        List<Character> chars = new ArrayList<>(map.keySet());
        Collections.sort(chars, (a, b) -> map.get(b) - map.get(a));

        StringBuilder sb = new StringBuilder();
        for (Character ch: chars) {
            for (int i=0; i<map.get(ch); i++) {
                sb.append(ch);
            }
        }
        return sb.toString();
    }
}                                                              


                                                                        // OPTIMAL APPROACH

class Solution {
    public String frequencySort(String s) {
        if (s == null || s.length() == 0) {
            return s;
        }

        int maxFreq = Integer.MIN_VALUE;
        HashMap<Character, Integer> map = new HashMap<>();
        for (char ch: s.toCharArray()) {
            map.put(ch, map.getOrDefault(ch, 0) + 1);
            maxFreq = Math.max(maxFreq, map.get(ch));
        }

        List<List<Character>> buckets = new ArrayList<>();
        for (int i=0; i<=maxFreq; i++) {
            buckets.add(new ArrayList<>());
        }

        for (Character key: map.keySet()) {
            int freq = map.get(key);
            buckets.get(freq).add(key);
        }

        StringBuilder sb = new StringBuilder();

        for (int i=buckets.size()-1; i>=1; i--) {
            for (Character ch: buckets.get(i)) {
                for (int val=0; val<i; val++) {
                    sb.append(ch);
                }
            }
        }

        return sb.toString();
    }
}
