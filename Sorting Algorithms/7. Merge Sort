class Solution {
    public static void merge(int [] arr, int l, int mid, int r){
        int n1 = mid-l+1;
        int n2 = r-mid;
        
        int [] left = new int[n1];
        int [] right = new int[n2];
        
        int  i = 0, j = 0, k = l;
        
        for (i=0; i<n1; i++){
            left[i] = arr[k++];
        }
        
        for (j=0; j<n2; j++){
            right[j] = arr[k++];
        }
        
        i = 0;
        j = 0;
        k = l;
        
        while (i < n1 && j < n2){
            if (left[i] < right[j]){
                arr[k++] = left[i++];
            }
            else {
                arr[k++] = right[j++];
            }
        }
        
        while (i < n1){
            arr[k++] = left[i++];
        }
        
        while (j < n2){
            arr[k++] = right[j++];
        }
    }
    void mergeSort(int arr[], int l, int r) {
        // code here
        if (l >= r){
            return;
        }
        int mid = (l + r)/2;
        mergeSort(arr, l, mid);
        mergeSort(arr, mid+1, r);
        merge(arr, l, mid, r);
    }
}
