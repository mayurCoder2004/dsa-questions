                                                                // BRUTE FORCE APPROACH

class Solution {
    public int [] prefMax(int [] arr) {
        int n = arr.length;
        int [] ans = new int[n];

        ans[0] = arr[0];
        for (int i=1; i<n; i++) {
            ans[i] = Math.max(ans[i-1], arr[i]);
        }
        return ans;
    }

    public int [] suffMax(int [] arr) {
        int n = arr.length;
        int [] ans = new int[n];

        ans[n-1] = arr[n-1];
        for (int i=n-2; i>=0; i--) {
            ans[i] = Math.max(ans[i+1], arr[i]);
        }
        return ans;
    }
    public int trap(int[] height) {
        int n = height.length;

        int [] pref = prefMax(height);
        int [] suff = suffMax(height);
        int total = 0;

        for (int i=0; i<n; i++) {
            int leftMax = pref[i];
            int rightMax = suff[i];

            if (height[i] < leftMax && height[i] < rightMax) {
                total += (Math.min(leftMax, rightMax) - height[i]);
            }
        }
        return total;
    }
}


                                                                // OPTIMAL APPROACH

class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int leftMax = 0;
        int rightMax = 0;
        int total = 0;
        int l = 0, r = n-1;

        while (l < r) {
            if (height[l] <= height[r]) {
                if (leftMax > height[l]) {
                    total += leftMax - height[l];
                }
                else {
                    leftMax = height[l];
                }
                l++;
            }
            else {
                if (rightMax > height[r]) {
                    total += rightMax - height[r];
                }
                else {
                    rightMax = height[r];
                }
                r--;
            }
        }
        return total;
    }
}
