class Solution {
    public int largestRectangleArea(int[] heights) {
        int n = heights.length;
        Stack<Integer> st = new Stack<>();
        int [] pse = new int[n];
        int [] nse = new int[n];

        // Calculating nse[]
        st.push(n-1);
        nse[n-1] = n;

        for (int i=n-2; i>=0; i--) {
            while (st.size() > 0 && heights[st.peek()] >= heights[i]) {
                st.pop();
            }
            if (st.isEmpty()) {
                nse[i] = n;
            }
            else {
                nse[i] = st.peek();
            }
            st.push(i);
        }

        // Emptying the stack 
        while (st.size() > 0) {
            st.pop();
        }

        // Calculating pse[]
        st.push(0);
        pse[0] = -1;

        for (int i=1; i<n; i++) {
            while (st.size() > 0 && heights[st.peek()] >= heights[i]) {
                st.pop();
            }
            if (st.isEmpty()) {
                pse[i] = -1;
            }
            else {
                pse[i] = st.peek();
            }
            st.push(i);
        }

        // Calculating the largest rectangle in the histogram
        int ans = Integer.MIN_VALUE;

        for (int i=0; i<n; i++) {
            int area = heights[i] * (nse[i] - pse[i] - 1);
            ans = Math.max(ans, area);
        }
        return ans;
    }
}
