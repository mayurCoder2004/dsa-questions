                                                            // BRUTE FORCE APPROACH

class Solution {
    public int[] nextGreaterElements(int[] nums) {
        int n = nums.length;
        int [] nge = new int[n];

        for (int i=0; i<n; i++) {
            for (int j=i+1; j<=i+n-1; j++) {
                int idx = j % n;
                if (nums[idx] > nums[i]) {
                    nge[i] = nums[idx];
                    break; 
                }
            }
            if (nge[i] == 0) {
                nge[i] = -1;
            }
        }
        return nge;
    }
}


                                                          // OPTIMAL APPROACH

class Solution {
    public int[] nextGreaterElements(int[] nums) {
        int n = nums.length;
        int [] nge = new int[n];
        Stack<Integer> st = new Stack<>(); 

        for (int i=2*n-1; i>=0; i--) {
            int idx = i % n;
            while (!st.isEmpty() && nums[idx] >= nums[st.peek()]) {
                st.pop();
            }
            if (i < n) {
                if (st.isEmpty()) {
                    nge[i] = -1;
                }
                else {
                    nge[i] = nums[st.peek()];
                }
            }
            st.push(idx);
        }
        return nge;
    }
}
