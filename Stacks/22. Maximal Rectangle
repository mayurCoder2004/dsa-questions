class Solution {
    public int [] nse(int [] arr) {
        int n = arr.length;
        Stack<Integer> st = new Stack<>();
        int [] nse = new int[n];

        st.push(n-1);
        nse[n-1] = n;

        for (int i=n-2; i>=0; i--) {
            while (!st.isEmpty() && arr[st.peek()] >= arr[i]) {
                st.pop();
            }

            if (st.isEmpty()) {
                nse[i] = n;
            }
            else {
                nse[i] = st.peek();
            }

            st.push(i);
        }
        return nse;
    }

    public int [] pse(int [] arr) {
        int n = arr.length;
        Stack<Integer> st = new Stack<>();
        int [] pse = new int[n];

        st.push(0);
        pse[0] = -1;

        for (int i=1; i<n; i++) {
            while (!st.isEmpty() && arr[st.peek()] >= arr[i]) {
                st.pop();
            }

            if (st.isEmpty()) {
                pse[i] = -1;
            }
            else {
                pse[i] = st.peek();
            }

            st.push(i);
        }
        return pse;
    }
    public int largestRectangleArea(int[] heights) {
        int n = heights.length;

        int [] nse = nse(heights);
        int [] pse = pse(heights);

        int max = 0;

        for (int i=0; i<n; i++) {
            int area = heights[i] * (nse[i] - pse[i] - 1);
            max = Math.max(area, max);
        }
        return max;
    }
    public int maximalRectangle(char[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        int [][] heights = new int[n][m];

        for (int j = 0; j < m; j++) {
            heights[0][j] = (matrix[0][j] == '1') ? 1 : 0;
        }

        for (int i=1; i<n; i++) {
            for (int j=0; j<m; j++) {
                if (matrix[i][j] == '1') {
                    heights[i][j] = heights[i - 1][j] + 1;
                } else {
                    heights[i][j] = 0;
                }
            }
        }

        int maxArea = 0;

        for (int i=0; i<n; i++) {
            maxArea = Math.max(maxArea, largestRectangleArea(heights[i]));
        }
        return maxArea;
    }
}
