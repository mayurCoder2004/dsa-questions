// Node class
class Node {
    int data;
    Node next;

    Node(int new_data) {
        data = new_data;
        next = null;
    }
}

// Queue class
class myQueue {
    Node head = null;
    Node tail = null;
    int size = 0;

    public myQueue() {
        // Initialize your data members
    }

    public boolean isEmpty() {
        // check if the queue is empty
        if (size == 0) {
            return true;
        }
        return false;
    }

    public void enqueue(int x) {
        // Adds an element x at the rear of the queue.
        Node temp = new Node(x);
        if (head == null) {
            head = tail = temp;
        }
        else {
            tail.next = temp;
            tail = temp;
        }
        size++;
    }

    public void dequeue() {
        // Removes the front element of the queue
        if (head == null) {
            return;
        }
        head = head.next;
        size--;
    }

    public int getFront() {
        // Returns the front element of the queue.
        // If queue is empty, return -1.
        if (isEmpty()) {
            return -1;
        }
        return head.data;
    }

    public int size() {
        // Returns the current size of the queue.
        return size;
    }
}
