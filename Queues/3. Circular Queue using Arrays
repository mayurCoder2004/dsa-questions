// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class Main {
    public static class CQueue {
        int f = -1;
        int r = -1;
        int size = 0;
        int [] arr = new int[10];
        int n = arr.length;
        
        public void add(int x) {
            if (size == 0) {
                f = 0;
                r = 0;
                arr[r] = x;
            }
            else if (size == arr.length) {
                System.out.println("Queue is full!");
                return;
            }
            else if (r < n-1) {
                r++;
                arr[r] = x;
            }
            else if (r == n-1) {
                r = 0;
                arr[r] = x;
            }
            size++;
        }
        
        public int remove() {
            if (size == 0) {
                System.out.println("Queue is empty!");
                return -1;
            }
            else if (f == n-1) {
                int val = arr[f];
                f = 0;
                size--;
                return val;
            }
            else {
                int val = arr[f++];
                size--;
                return val;
            }
        }
        
        public int peek() {
            if (size == 0) {
                System.out.println("Queue is empty!");
                return -1;
            }
            return arr[f];
        }
        
        public void display() {
            if (f <= r) {
                for (int i=f; i<=r; i++) {
                    System.out.println(arr[i] + " ");
                }
            }
            else {
                for (int i=f; i<=n-1; i++) {
                    System.out.println(arr[i] + " ");
                }
                for (int i=0; i<=r; i++) {
                    System.out.println(arr[i] + " ");
                }
            }
        }
    }
    public static void main(String[] args) {
        CQueue q = new CQueue();

    // 1️⃣ Enqueue 5 elements
    System.out.println("Enqueue 5 elements:");
    q.add(10);
    q.add(20);
    q.add(30);
    q.add(40);
    q.add(50);
    q.display();

    // 2️⃣ Remove 3 elements (to create space)
    System.out.println("\nRemove 3 elements:");
    System.out.println("Removed: " + q.remove());
    System.out.println("Removed: " + q.remove());
    System.out.println("Removed: " + q.remove());
    q.display();

    // 3️⃣ Enqueue 4 more (will cause wrap-around)
    System.out.println("\nAdd 4 more elements (wrap-around starts):");
    q.add(60);
    q.add(70);
    q.add(80);
    q.add(90);
    q.display();

    // 4️⃣ Peek the front element
    System.out.println("\nFront element: " + q.peek());

    // 5️⃣ Fill the queue completely
    System.out.println("\nFilling queue completely:");
    q.add(100);
    q.add(110);
    q.display();

    // 6️⃣ Try adding one more (should say "Queue is full")
    System.out.println("\nTrying to add extra element (should fail):");
    q.add(120);

    // 7️⃣ Remove all to empty the queue
    System.out.println("\nRemoving all elements:");
    while (q.size > 0) {
        System.out.println("Removed: " + q.remove());
    }

    // 8️⃣ Try removing when empty
    System.out.println("\nTrying to remove from empty queue:");
    q.remove();
    }
}
