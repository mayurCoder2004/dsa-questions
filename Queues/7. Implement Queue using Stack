                                                          // APPROACH 1

class MyQueue {
    Stack<Integer> st = new Stack<>();
    Stack<Integer> helper = new Stack<>();
    public MyQueue() {
        
    }
    
    public void push(int x) {
        st.push(x);
    }
    
    public int pop() {
        while (st.size() > 1) {
            helper.push(st.pop());
        }
        int val = st.pop();
        while (!helper.isEmpty()) {
            st.push(helper.pop());
        }
        return val;
    }
    
    public int peek() {
        while (st.size() > 1) {
            helper.push(st.pop());
        }
        int val = st.peek();
        while (!helper.isEmpty()) {
            st.push(helper.pop());
        }
        return val;
    }
    
    public boolean empty() {
        return st.isEmpty();
    }
}


                                                                // APPROACH 2

class MyQueue {
    Stack<Integer> st = new Stack<>();
    Stack<Integer> helper = new Stack<>();
    public MyQueue() {
        
    }
    
    public void push(int x) {
        if (st.size() == 0) st.push(x);
        else {
            while (st.size() > 0) {
                helper.push(st.pop());
            }
            st.push(x);
            while (helper.size() > 0) {
                st.push(helper.pop());
            }
        }
    }
    
    public int pop() {
        return st.pop();
    }
    
    public int peek() {
        return st.peek();
    }
    
    public boolean empty() {
        return st.isEmpty();
    }
}
