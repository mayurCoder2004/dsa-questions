                                                                      // BRUTE FORCE APPROACH

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        int max = 0;

        for (int i=0; i<n; i++) {
            int [] freq = new int[255];
            // Loop to check the freq of each element
            for (int j=i; j<n; j++) {
                // Check if element is previously visited or not
                if (freq[s.charAt(j)] == 1) {
                    break;
                }
                // If element is not visited just calculate the length of substring and add in the answer
                int length = j - i + 1;
                max = Math.max(length, max);
                freq[s.charAt(j)] = 1;
            }
        }
        return max;
    }
}                                                                                      


                                                                        // OPTIMAL APPROACH

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        int maxLen = 0;
        int left = 0;

        HashSet<Character> set = new HashSet<>();
        
        for (int right=0; right<n; right++) {
            // Check if element is present or not
            while (set.contains(s.charAt(right))) {
                set.remove(s.charAt(left));
                left++;
            }

            // Add the element and update the len and maxLen
            set.add(s.charAt(right));
            int len = right - left + 1;
            maxLen = Math.max(len, maxLen);
        }
        return maxLen;
    }
}
