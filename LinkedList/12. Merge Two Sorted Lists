                                                        // APPROACH 1 (USING EXTRA SPACE)  

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode temp1 = list1;
        ListNode temp2 = list2;
        ListNode node = new ListNode(-1);
        ListNode t = node;

        while (temp1 != null && temp2 != null){
            if (temp1.val <= temp2.val){
                ListNode temp = new ListNode(temp1.val);
                t.next = temp;
                temp1 = temp1.next;
            }
            else {
                ListNode temp = new ListNode(temp2.val);
                t.next = temp;
                temp2 = temp2.next;
            }
            t = t.next;
        }

        if (temp1 != null){
            t.next = temp1;
        }
        else {
            t.next = temp2;
        }

        return node.next;
    }
}



                                                          // APPROACH 2(WITHOUT USING EXTRA SPACE)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode temp1 = list1;
        ListNode temp2 = list2;
        ListNode h = new ListNode(-1);
        ListNode t = h;

        while (temp1 != null && temp2 != null){
            if (temp1.val <= temp2.val){
                t.next = temp1;
                t = temp1;
                temp1 = temp1.next;
            }
            else {
                t.next = temp2;
                t = temp2;
                temp2 = temp2.next;
            }
        }

        if (temp1 == null){
            t.next = temp2;
        }
        else {
            t.next = temp1;
        }

        return h.next;
    }
}
