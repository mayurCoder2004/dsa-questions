                                                          // BRUTE FORCE APPROACH

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        ListNode temp = head;
        int size = 0;

        while (temp != null){
            size++;
            temp = temp.next;
        }

        int [] arr = new int[size];

        temp = head;
        int k = 0;
        while (temp != null){
            arr[k++] = temp.val;
            temp = temp.next;
        }

        Arrays.sort(arr);

        ListNode h = new ListNode(100);
        ListNode t = h;
        k = 0;
        while (k != size){
            ListNode newNode = new ListNode(arr[k++]);
            t.next = newNode;
            t = newNode;
        }
        return h.next;
    }
}



                                                                    // OPTIMAL APPROACH

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head.next;

        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummyNode = new ListNode(-1);
        ListNode temp = dummyNode;

        while (list1 != null && list2 != null) {
            if (list1.val < list2.val) {
                temp.next = list1;
                list1 = list1.next;
                temp = temp.next;
            }
            else {
                temp.next = list2;
                list2 = list2.next;
                temp = temp.next;
            }
        }

        if (list1 != null) temp.next = list1;
        else temp.next = list2;

        return dummyNode.next;
    }
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) return head;

        ListNode middle = middle(head);
        ListNode right = middle.next;
        middle.next = null;
        ListNode left = head;

        left = sortList(left);
        right = sortList(right);
        return mergeTwoLists(left, right);
    }
}
