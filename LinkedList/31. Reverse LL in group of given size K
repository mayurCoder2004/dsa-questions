/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        while (curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev; 
    }

    public ListNode KthNode(ListNode temp, int k) {
        while (temp != null && k > 1) {
            temp = temp.next;
            k--;
        }
        return temp; 
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode temp = head;
        ListNode prevLast = null;
        ListNode newHead = head;

        while (temp != null) {
            ListNode kthNode = KthNode(temp, k);
            if (kthNode == null) {
                if (prevLast != null) {
                    prevLast.next = temp; 
                }
                break;
            }

            ListNode nextNode = kthNode.next;
            kthNode.next = null;

            // reverse current block
            ListNode reversedHead = reverse(temp);

            if (temp == head) {
                newHead = reversedHead; 
            } else {
                prevLast.next = reversedHead;
            }

            prevLast = temp; 
            temp = nextNode; 
        }
        return newHead;
    }
}
