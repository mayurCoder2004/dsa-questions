                                                        // BRUTE FORCE APPROACH (USING EXTRA SPACE)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
        ListNode even = new ListNode(-1);
        ListNode odd = new ListNode(-1);
        ListNode tempe = even;
        ListNode tempo = odd;
        ListNode temp = head;

        while (temp != null){
            tempo.next = temp;
            temp = temp.next;
            tempo = tempo.next;

            tempe.next = temp;
            if (temp == null){
                break;
            }
            temp = temp.next;
            tempe = tempe.next;
        }
        odd = odd.next;
        even = even.next;
        tempo.next = even;
        return odd;
    }
}


                                                            // OPTIMAL APPROACH (WITHOUT USING APPROACH)

// User function Template for Java

/*
class Node{
    int data;
    Node next;

    Node(int x){
        data = x;
        next = null;
    }
}
*/

class Solution {
    Node divide(Node head) {
        // code here
        Node oddDummy = new Node(100);   
        Node evenDummy = new Node(100);

        Node odd = oddDummy;
        Node even = evenDummy;
        Node temp = head;
        
        while (temp != null) {
            if (temp.data % 2 != 0) {
                odd.next = temp;
                odd = odd.next;
            } else {
                even.next = temp;
                even = even.next;
            }
            temp = temp.next;
        }
        odd.next = null;   
        even.next = oddDummy.next;
        return evenDummy.next;
    }
}
