/*

Definition for doubly Link List Node
class Node {
    int data;
    Node next;
    Node prev;

    Node(int val) {
        data = val;
        next = null;
        prev = null;
    }
}
*/
class Solution {
    public Node deleteNode(Node head, int x) {
        // code here
        if (x == 1){
            head = head.next;
            head.prev = null;
            return head;
        }
        
        Node temp = head;
        int idx = 1;
        while (idx < x-1){
            temp = temp.next;
            idx++;
        }
        
        if (temp.next.next == null){
            temp.next = null;
            return head;
        }
        
        Node a = temp.next.next;
        temp.next = a;
        a.prev = temp;
        return head;
    }
}




                                                                // ALTERNATE METHOD

/*
Structure of a Doubly LinkList
class Node {
    int data;
    Node next;
    Node prev;

    Node(int val) {
        data = val;
        next = null;
        prev = null;
    }
}
*/
class Solution {
    public Node delPos(Node head, int x) {
        // code here
        Node temp = head;
        int i = 1;

        // Traverse to the node at position x
        while (i < x && temp != null) {
            temp = temp.next;
            i++;
        }

        // If position is invalid
        if (temp == null) return head;

        // Case 1: deleting head
        if (temp == head) {
            head = head.next;
            if (head != null) head.prev = null;
            return head;
        }

        // Case 2: deleting last node
        if (temp.next == null) {
            temp.prev.next = null;
            return head;
        }

        // Case 3: deleting middle node
        temp.prev.next = temp.next;
        temp.next.prev = temp.prev;
        
        return head;
    }
}
